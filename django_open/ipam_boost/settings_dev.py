"""
Django settings for ipam_boost project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-xyok!l9tqv+*t8ar)lcut_(lbvnyu#y-3(@%+)4$hl=j$6#yb-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# 用户自定义配置
if os.path.exists("{}/{}/{}".format(BASE_DIR, "ipam_boost", "conf.py")):
    from .conf import *
else:
    raise RuntimeError("没有找到conf.py的配置信息")

CSRF_TRUSTED_ORIGINS = ["http://{}:8888".format(SERVER_IP)]
# Application definition
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ipam_boost.settings")
os.environ.setdefault("DJANGO_ALLOW_ASYNC_UNSAFE", "true")
INSTALLED_APPS = [
    # 'simplepro',
    # 'simpleui',
    # 'guardian',
    'django_filters',
    "django_celery_beat",
    "django_celery_results.apps.CeleryResultConfig",
    "rest_framework",
    'rest_framework.authtoken',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'import_export',
    # "rest_framework_tracking",
    'reversion',
    'open_ipam',
    'users',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 加入simplepro的中间件
    # 'simplepro.middlewares.SimpleMiddleware'
]
MIDDLEWARE += ['middlewares.LogMiddleware.PlatformOperationLogs']

ROOT_URLCONF = 'ipam_boost.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'OPTIONS': {
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'openwisp_utils.loaders.DependencyLoader',
                'django.template.loaders.app_directories.Loader',
            ],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'openwisp_utils.admin_theme.context_processor.menu_groups',
            ],
        },
    },
]

WSGI_APPLICATION = 'ipam_boost.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_USER_MODEL = 'users.UserProfile'
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "/static/")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CELERY_ONCE_URL = "{}1".format(REDIS_URL)
CELERY_RESULT_BACKEND = "django-db"  # 使用django数据库
CELERY_BROKER_URL = "{}8".format(REDIS_URL)
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_ACCEPT_CONTENT = ["json", "application/text"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERYD_CONCURRENCY = 40  # celery worker的并发数
CELERY_MAX_TASKS_PER_CHILD = 20
CELERYD_MAX_TASKS_PER_CHILD = 20
# 这个表示每个工作的进程／线程／绿程 在执行 n 次任务后，主动销毁，之后会起一个新的。主要解决一些资源释放的问题。
CELERY_RESULT_EXPIRES = 7200  # celery任务执行结果的超时时间，
CELERY_TASK_RESULT_EXPIRES = 7200
# 这个表示保存任务结果的时长，这个时间会被设置到 redis 里面（假设 backend 是 redis ），如果抓取数据量大的话，是可以缩短保存的时间，
# 节省 backend 的资源（ redis 主要是内存）消耗，默认是 24 小时（ 86400 ），单位是秒。
CELERY_TASK_TIME_LIMIT = 7200
# 单个任务的运行时间不超过此值，否则会被SIGKILL 信号杀死
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = "UTC"
CELERY_WORKER_CONCURRENCY = 40  # celery worker的并发数
# 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可
# 官方用来修复CELERY_ENABLE_UTC=False and USE_TZ = False 时时间比较错误的问题；
# 详情见：https://github.com/celery/django-celery-beat/pull/216/files
DJANGO_CELERY_BEAT_TZ_AWARE = False

# 隐藏首页的快捷操作和最近动作
SIMPLEUI_HOME_QUICK = False
SIMPLEUI_HOME_ACTION = True

# 隐藏右侧SimpleUI广告链接和使用分析
SIMPLEUI_HOME_INFO = False
SIMPLEUI_ANALYSIS = False
SIMPLEUI_INDEX = '/ipam/admin'

# 设置默认主题，指向主题css文件名。Admin Lte风格
SIMPLEUI_DEFAULT_THEME = 'element.css'

SIMPLEUI_HOME_ICON = 'fa fa-home'

SIMPLEUI_CONFIG = {
    'system_keep': True,
    'menu_display': ['地址管理中心', '周期任务', '用户管理', '认证令牌', 'Celery Results', '认证和授权'],
    # 开启排序和过滤功能, 不填此字段为默认排序和全部显示, 空列表[] 为全部不显示.
    'dynamic': False,  # 设置是否开启动态菜单, 默认为False.  如果开启, 则会在每次用户登陆时动态展示菜单内容

    'menus': [
        {
            'name': '地址管理中心',
            'icon': 'fa el-icon-monitor',
            'models': [
                {
                    'name': '子网网段表',
                    'url': 'open_ipam/subnet/',
                    'icon': 'far fa-bookmark'
                },
                {
                    'name': '网络地址表',
                    'url': 'open_ipam/ipaddress/',
                    'icon': 'far fa-file-excel'
                },
                {
                    'name': '地址标签表',
                    'url': 'open_ipam/tagsmodel/',
                    'icon': 'far fa-file-excel'
                },
                # {
                #     'name': '业务线表',
                #     'url': 'open_ipam/bgbu/',
                #     'icon': 'far fa-file-excel'
                # },
            ]
        },

        {
            'name': '用户管理',
            'icon': 'far fa-user',
            'models': [{
                'name': '用户列表',
                'url': 'users/userprofile/',
                'icon': 'far fa-user'
            }]
        },
        # {
        #     'name': '认证和授权',
        #     'icon': 'fa fa-shield-alt',
        #     'models': [{
        #         'name': '用户',
        #         'url': 'auth/user/',
        #         'icon': 'fa fa-user'
        #     }, {
        #         'name': '角色',
        #         'url': 'auth/group/',
        #         'icon': 'fa fa-users-cog'
        #     }]
        # }
    ]

}
REST_FRAMEWORK = {
    # 取消默认权限类
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.DjangoModelPermissions',
        # 'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ),
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework_simplejwt.authentication.JWTAuthentication',
    #     'utils.authentication.ExpiringTokenAuthentication',
    #     'rest_framework.authentication.SessionAuthentication',
    #     'rest_framework.authentication.BasicAuthentication',
    # ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',

}
AUTHENTICATION_BACKENDS = (
    # "django_auth_ldap.backend.LDAPBackend",
    "django.contrib.auth.backends.ModelBackend",
    # "guardian.backends.ObjectPermissionBackend",  # 这是guardian的
)
# Restful token 有效时间八小时
REST_FRAMEWORK_TOKEN_EXPIRE_MINUTES = 60 * 60 * 8
